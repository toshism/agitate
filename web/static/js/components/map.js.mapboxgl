import React, { PropTypes } from 'react';

import { MAP_TOKEN, MAP_STYLE } from '../config';

import MapGL from 'react-map-gl';
import Immutable from 'immutable';

const AMERICA = {
  longitude: -95.7129,
  latitude: 37.0902
};

const COLORS = [
  '#F00',
  '#0F0',
  '#00F',
  '#900',
];

function buildStyle(geoJSON, { fill = 'red', stroke = 'blue' }) {
  return Immutable.fromJS({
    version: 8,
    name: 'Example raster tile source',
    sources: {
      'my-geojson-polygon-source': {
        type: 'geojson',
        data: geoJSON
      },
      background: {
        type: 'vector',
        url: MAP_STYLE,
      }
    },
    layers: [
      {
        id: 'background-layer',
        source: 'background',
        type: 'line',
        'source-layer': 'background-basic',
        layout: {
          visibility: 'visible'
        }
      },
      {
        id: 'geojson-polygon-fill',
        source: 'my-geojson-polygon-source',
        type: 'fill',
        paint: {'fill-color': fill, 'fill-opacity': 0.4},
        interactive: true
      }, {
        id: 'geojson-polygon-stroke',
        source: 'my-geojson-polygon-source',
        type: 'line',
        paint: {'line-color': stroke, 'line-width': 4},
        interactive: false
      }
    ]
  });
}

class Map extends React.Component {
  render() {
    const { loading, lat, lon, districts } = this.props;
    let center, style;

    if(!lat) {
      center = AMERICA;
      style  = MAP_STYLE;
    } else {
      center = {
        longitude: lon,
        latitude: lat
      };
      style  = buildStyle(JSON.parse(districts[0].geom), { });
    }

    return (

    );
  }
}

export default Map;

/*
   <MapGL
   mapboxApiAccessToken={MAP_TOKEN}
   mapStyle={MAP_STYLE}
   width={600}
   height={600}
   zoom={8}
   longitude={center.longitude}
   latitude={center.latitude}
   onLoad={ (map) => {

   }}
   />*/

/*

import ReactMapboxGl, { GeoJSONLayer, Layer, Feature, Popup,
                        ScaleControl, ZoomControl } from "react-mapbox-gl";

class Map extends React.Component {
  constructor(props) {
    super(props);
    this.handleMapClick.bind(this);
  }
  handleMapClick(_e, map) {
    this.props.onClick(map);
  }
  renderDistricts(districts) {
    return districts.map( (district, i) => {
      return (
        <GeoJSONLayer
            key={'dist' + i.toString()}
            data={JSON.parse(district.geom)}
            circlePaint={{ 'circle-opacity': 0 }}
            linePaint={{ 'line-width': 2, 'line-color': '#300' }}
            fillPaint={{
              'fill-color': COLORS[i],
              'fill-opacity': 0.3,
              'fill-outline-color': '#F00'
            }} />
      );
    }).concat(
      districts.map( (district, i) => {
        const { state, lon, lat, name } = district;
        const score = Math.round(district.score * 100) / 100;
        return (
          <Popup
              key={'pop'+i.toString()}
              coordinates={[lat, lon]}>
              { state.short + ' ' + name + " (" + score + ")" }
          </Popup>
        )
      })
    );
  }
  
  render() {
    const { loading, lat, lon, districts } = this.props;
    let center;

    if(!lat) {
      center = AMERICA
    } else {
      center = [ lon, lat ];
    }
    
    return (
      <ReactMapboxGl
            style={MAP_STYLE}
            onClick={this.handleMapClick.bind(this)}
            accessToken={MAP_TOKEN}
            containerStyle={{ height: '100vh', width: '100vw' }}
            center={center}
            zoom={[10]}>
          <ScaleControl/>
          <ZoomControl/>
          <Layer
                type="symbol"
                id="marker"
                layout={{ "icon-image": "marker-15" }}>
              <Feature coordinates={center}/>
          </Layer>
          {  this.renderDistricts(districts)  }
        </ReactMapboxGl> 
      );
  }
}

Map.propTypes = {
  onClick: PropTypes.func.isRequired,
  lat: PropTypes.number,
  lon: PropTypes.number,
  districts: PropTypes.array
};

export default Map;

*/
